python语法
import导入模块
随机数random.randint(   ,  )
随机数表random.getstate()
divmod(,)返回x//y,x%y
x**y表示x的y次方
abs()取绝对值
int()转换为整数
pow( x,y,z)=x^y%z
if......:
	statement
elif....:
	statement

while ....:
	statement

else:


for 变量 in 可迭代对象:
	statement

range(stop)生成从0开始到stop的序列
range(start,stop)
range(start,stop,step)step是跨度


列表
rhyme[]
可以包含各种类型
rhyme[-1]倒数第一个
rhyme[3:6]为三到六
列表切片
rhyme[0:6:2]为0到6跨度为2
.append()为在列表最后加一个指定的元素
.extend()在列表最后添加一个可迭代对象
.insert(x，y)在列表中的x个位置插入元素y
.remove()移除元素，诺存在多个元素，只会移除第一个
如果元素不存在，程序会报错
.pop()移除下标索引值
.clear()清空列表
.sort()从小到大排序
.sort(reverse=true)从大到小排序
.reverse()前后调换
.count()调查某个元素的数量
.index()查找某个元素的索引值
.index(x,start,stop)指定从哪到哪开始
.copy()将列表拷贝，可赋值给其它列表
用切片方法得到的也是拷贝
以上都是浅拷贝
嵌套列表要用深拷贝
深拷贝需要导入模块
import copy
y=copy.deepcopy(x)
y=copy.copy(x)


列表推导式
a[]=[expression for target in iterable if condition]
嵌套列表推导式
a[]=[expression for target in iterable
		for target in iterable]
先执行for语句再执行if语句
使用ord(x)可以获得acs||码值


元组
元组不可修改
但如果元组中的元素指向一个可修改的列表，则列表中的元素可以被修改
可使用切片导出
只支持count和index方法
生成只有一个元素的元组
x=(520,)

字符串
.capitalize()使首字母大写，其他字母小写
.casefold()返回全是小写的字符串
.title()将字符串中每个单词的首字母变成大写，其他变成小写
.swapcase()将字符串中所有字母的大小写反转
.upper()将所有字母变成大写
.lower()将所有字母变成小写
.center(x)使字符串居中，x为长度
.xljust(x)左对齐
.rjust(x)右对齐
.zfill(x)用0去填充左侧
默认为填充空格，可再x后加，加自定义字符
查找count(sub,start,end)
.find()查找第一个出现的下标索引值
.rfind()从右往左找
.index()
替换
.expandtabs([tabsite =8])
.replace('x','y')
translate(table)制定规则
str.maketrans(table)使用规则替换

判断
.startswich(prefix,start,end)字符串是否出现在开始位置
.endswith(prefix,start,end)字符串是否出现在结束位置
支持使用元组，元组中的元素匹配就可以输出True
.istitle()
.isupper()
.islower()
.isalpha()

.format()将字符串中的{}替换



序列
可变序列和不可变序列
元组是不可变序列
is ,is not.判断是否一致
in, not in判断是否存在
del 用于删除
相关函数
list()转换为列表
tuple()转换为元组
str()转换为字符串
iter()转换为迭代器
min()对比传入的参数也可以是可迭代对象，返回最小值
max()对比传入的参数也可以是可迭代对象，返回最大值
如果传入的字符串，则返回编码值最大的字母
len()计算长度
sum()计算求和
sorted()从小到大排序
reversed()倒序排列返回的是迭代器
需要用list()使他变成列表
all()判断可迭代对象中的值是否为真
any()只要有一个
enumerate(，start)函数用于返回一个枚举对象，可以将迭代对象每个元素及从0开始的序号组成一个二维数组
zip()将多个个序列组合成二位列表，会以最短的那个为准。
import itertools
itertools.zip.longest(x,y,z)
使用上述函数，则不会丢掉任何元素
map(函数,对象，对象)让函数对可迭代对象进行加工，返回迭代器
如果一个长一个短，则只执行短的次数
filter()和map一样，但只返回计算结果为真的迭代器

迭代器和可迭代对象
迭代器肯定是一个可迭代对象
可迭代对象可以重复使用，迭代器则是一次性的
iter()转换为迭代器
next(z)依次提取迭代器中的元素，但提取完后迭代器没有元素





字典
x={}可以生成字典
也可以用dict()函数
有很多方法创建，特别是zip函数
还可使用d=dict.fromkeys('fishc',250)快速初始化一个字典
给每个可迭代对象赋值250
d.pop()可弹出某个键并返回这个键对应的值
d.popitem()会弹出最后的键值
del d[]可删除键
.clear()可清空字典
.update({   })可同时修改多个键
.get('c',0)查找到则返回键值，未查找到则返回输入的参数
.setdefault('c','code')若存在c则返回键值，若不存在，则新增'c'：'code'
.copy()浅拷贝
len()获取键值对的数量
keys = d.keys()
嵌套字典
需要输入两次键才能得到对应的值
也可以嵌套列表，那么第二次应该输入下标


字典推导式
d={ x:y for x,y in d.items() if }



集合
{   }
大括号，有随机性，读取后是随机的
不能使用下标进行访问
可以使用in，not in
可使用
set('   ')创建集合
可以去重复
.isdisjoint()可以判断是否相关两个参数
.issubset()可以判断前面是否为后面子集
利用><可判断是否为子集
并集计算可用|
交集计算可用&
差集使用减号
对称差集使用脱字符^
.union()可以求出并集
.intersection()可以求出交集
.difference()可以求出差集
以上三种方法都支持多参数
.symmetric_difference()


forzenset()创建不可变的集合

.update(,)可支持多个参数，加入多个参数
.difference_update()返回差集
.symmetric_difference_update('')返回对称差集
.add()添加元素
于.update差别：.add是直接添加整个字符
.update是添加可迭代对象的每一个元素
.remove()移除一个元素，若不存在则异常
.discard()移除一个元素，若不存在则静默
.pop()随机弹出一个元素
.clear()清空集合



创建集合和字典
要使其中每一个键和元素满足 可哈希 
通过hash()函数可获得哈希值
不可嵌套集合，但如果是frozenset则可以



函数
*收集参数
**可收集字典
*形参可以解包元组
**形参可以解包字典
使用def 定义函数
用return 返回参数
可使用关键字参数，
可定义默认值，
在/左侧不能使用关键字参数
函数可以返回元组

收集参数
def myfunc(*args):
	print(f"有{len(args)}个参数")
	print(f"第二个参数是{args[1]}")

局部变量和全局变量；
全局变量可以影响函数
但如果存在同名局部变量和全局变量
则在函数中，局部变量会覆盖全局变量
如果没有同名局部变量，那么函数里面和外面的变量是用一个
nonlocal可在嵌套函数内部声明一个外部函数

嵌套函数
可以在函数中定义函数，然后调用
但是内部的函数无法在外部被调用

闭包函数
在外层函数中返回内层函数，使得可在外层修改内层的值

可以把函数作为另一个函数的变量
装饰器
@函数
定义函数

应用函数时，会把函数最为变量输入上一层函数中
如果有多层装饰器，则从下往上读取
可以在装饰器后面用关键词输入参数

函数名=    lambda 参数: 表达式以及返回值
lamdba表达式可以放入列表中

生成器
yield
每次输出一个对象并保留状态，使函数变成一个可迭代对象
支持next函数

递归函数




is运算符
用于检验是否是一个东西
多个变量指向同一个字符串，则为True
多个变量指向同一列表，则为False
