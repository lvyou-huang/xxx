//单行注释
/*
*/多行注释
cout  <<"内容"<< endl;--------屏幕输出

变量语法：
数据类型 变量名 = 初始值
例：
int a = 10；

常量语法：
1.宏常量：
#define 常量名 常量值
通常在文件上方定义
2.const修饰的变量：
const 数据类型 常量名 常量值；

给变量和常量取名的时候不能用c++的关键字

标识符命名规则
标识符不能是关键字
标识符只能由字母数字下划线组成
第一个字符不能为数字
标识符中的字母区分大小写
变量起名最好见名只意




数据类型
数据类型存在意义：给变量分配一个合适的内存空间
数据类型有

整型
short ;int;long;long long ;
2字节；4字节；4字节；8字节；
取值范围
-2^15~2^15-1     -32768~32767   
2^31
2^31
2^63



实型
用于表示小数
float;double 
单精度；双精度
表示的有效数字范围不同
7位有效数字，15~16位有效数字
小数点前的数字也算有效数字


字符型
字符型变量用于表示单个字符
语法：
char ch = 'a';
求asc11编码
cout<<(int)ch<<endle;
结论a是97，b是98，类推
A是65



转义字符
用于表示一些不能显示出的asc11字符
有很多但是只用记常见的
换行符\n
反斜杠\\
水平制表符\t


字符串型
用于表示一串字符
c语言风格：
char 变量名[] = "字符串值“
c++风格：
string 变量名 = "字符串值"
并且需要有头文件
#include <string>


布尔类型 bool
代表真假的值
语法：
bool aaa = true 或者 false
非0是真，0是假

数据的输入
用于从键盘获取数据
语法：
cin>>变量；

科学计数法e


sizeof关键字
作用：统计数据类型所占内存大小
语法：
sizeof(数据类型 或 变量）



算数运算符
用于处理四则运算
+-*/
两个整数数相除只得整数，小数部分去除，除数不能为0
小数相除可以得小数



取模运算
取余数
10%3=1


赋值运算符
=；+=；-=；*=；/=；

关系运算符
==；！=；<;>;<=;>=
运算符优先级
关系运算符的优先级比算数运算符优先级低，但比赋值运算符高，
关系运算符中==和！=的优先级比其他的低



逻辑运算符
！非；&&与；||或 







程序流程结构
顺序结构，选择结构，循环结构


选择结构
单行选择结构语法：
if(条件）{条件满足执行的语句}
注意条件括号后面不加分号。


多行选择结构语法
if（条件）{条件满足执行语句}else{条件满足执行语句}


多条件的if语句
if(条件1){执行}else if（条件2）{执行2}

嵌套if语句




三目运算符
实现简单的判断
语法：表达式1？表达式2：表达式3
如果表达式1成立则返回表达式2，反之则3
三目运算符返回的是变量可以继续赋值



swtich语句
执行多条件分支语句
语法
swtich(表达式）
{

case 结果1：执行语句；break；
case 结果2：执行语句；break；
default：执行语句；break；
}
缺点，判断分支时只能是整型或字符型，不能判断区间
有点，结构清晰，执行效率高


循环结构
while循环语句
语法：while(循环条件）{循环语句}
只要循环条件为真，就一直执行循环语句。
直到为假
写循环结构一定要避免死循环出现 


do...while循环语句
先执行循环语句在看循环条件
语法：
do{执行语句}while（循环条件）


for循环语句
语法：
for（起始表达式；条件表达式；末尾循环体）{循环语句；}
起始表达式不参加循环，用于对变量赋值，或创建变量
条件表达式作为条件
末尾表达式用于循环结束后执行的代码


跳转语句
用于跳出选择结构或者循环结构
break的使用时机：出现在switch条件语句中，作用是终止case并跳出
出现在循环语句中跳出循环语句
出现在嵌套循环语句中用于跳出最近的内层循环语句


continue语句
在循环语句中跳过本次循环中余下的尚未执行的语句，继续执行下次循环


goto语句
跳转
goto FLAG；
FLAG：




函数
例子 
void sum(int begin ,int end)
{
int i;
int sum;
for (i=begin;i<=end;i++){
sum+=i;
}
printf("%d到%d的和是%d\n“,begin,end,sum;}


函数头void sum(int begin ,int end)
函数名 sum
返回类型 void
函数体int i;
int sum;
for (i=begin;i<=end;i++){
sum+=i;
}
printf("%d到%d的和是%d\n“,begin,end,sum;
参数表int begin ,int end

调用参数：函数名（参数值）
即使没有参数也要有（）




















数组
一维数组
语法：三种
数据类型 数组名【数组长度】；
数据类型 数组名【数组长度】={值1，值2}
数据类型 数组名【】={值1，值2}
特点数组中的每个数据元素都是相同的数据类型
数组是由连续的内存位置组成的
定义数组的时候必须有初始长度

int arr[5];//这是声明数据个数
arr[0]=10;
arr[1]=20;
arr[2]=30;
arr[3]=40;
arr[4]=50;

一维数组名的用途
可以统计整个数组在内存中的长度    sizeof（arr）
可以获取数组在内存中的首地址   cout<<"数组名；
但这是16进制，可以用
cout<<(int)arr;
查看10进制的地址
还有用：
cout<<&arr[0];
可以查看第一个元素地址

数组的首地址和第一个元素的地址相同
第二个为第一个+4

数组名不能进行赋值的操作







生成随机数rand（）%100
生成0~99的随机数
但这是伪随机数
可以加#include <ctime>这个头文件
在main函数里加srand(（unsigned int)time(NULL))
来创造一个与时间有关的随机数


